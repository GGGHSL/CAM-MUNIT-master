# logger options
image_save_iter: 1000         # How often do you want to save output images during training
image_display_iter: 100       # How often do you want to display output images during training
display_size: 8               # How many images do you want to display each time
snapshot_save_iter: 1000      # How often do you want to save trained models
log_iter: 1000                # How often do you want to log the training stats

# optimization options
max_iter: 1000000             # maximum number of training iterations
max_pre_iter: 34000           # maximum number of Generator pre-training iterations (34000 = 10 epochs)
batch_size: 1                 # batch size
weight_decay: 0.0001          # weight decay
beta1: 0.5                    # Adam parameter
beta2: 0.999                  # Adam parameter
init: kaiming                 # initialization [gaussian/kaiming/xavier/orthogonal]
lr: 0.0001                    # initial learning rate
lr_policy: step               # learning rate scheduler
step_size: 100000             # how often to decay learning rate
gamma: 0.5                    # how much to decay learning rate

adv_w: 1                      # weight of adversarial loss
rec_w: 10                     # weight of image reconstruction loss | 太大会导致分不开
rec_s_w: 1                    # weight of style reconstruction loss |
rec_c_w: 1                    # weight of content reconstruction loss
cyc_w: 20                     # weight of explicit style augmented cycle consistency loss
cam_w: 1000                   # weight of cam loss
vgg_w: 10                     # weight of domain-invariant perceptual loss
alpha: 0.02                   # l2 / l1 ratio of Generator pre-training content loss

# models options
gen:
  dim: 64                     # number of filters in the bottommost layer
  mlp_dim: 256                # number of filters in MLP
  style_dim: 256              # length of style code
  activ: relu                 # activation function [relu/lrelu/prelu/selu/tanh]
  n_downsample: 2             # number of down-sampling layers in content encoder
  n_upsample: 2               # number of up-sampling layers in decoder | 2: 256, 4: 1024
  n_res: 4                    # number of residual blocks in content encoder/decoder
  pad_type: reflect           # padding type [zero/reflect]
dis:
  dim: 64                     # number of filters in the bottommost layer
  norm: none                  # normalization layer [none/bn/in/ln]
  activ: lrelu                # activation function [relu/lrelu/prelu/selu/tanh]
  n_layer: 4                  # number of layers in D
  gan_type: lsgan             # GAN loss [lsgan/nsgan]
  num_scales: 3               # number of scales
  pad_type: reflect           # padding type [zero/reflect]

# data options
input_dim_a: 3                              # number of image channels [1/3]
input_dim_b: 3                              # number of image channels [1/3]
num_workers: 8                              # number of data loading threads
rotation: 30                                # rotation angle (10, rotation)
rotate_prob: 0.3                            # rotation probability
new_size: 256                               # first resize the shortest image side to this size
crop_image_height: 256                      # random crop image of this height
crop_image_width: 256                       # random crop image of this width
data_root: ./datasets/selfie2anime/         # dataset folder location
vgg_model_path: ./vgg_models/